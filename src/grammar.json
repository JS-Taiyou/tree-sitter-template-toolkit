{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "template_toolkit",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SYMBOL",
            "name": "content"
          },
          {
            "type": "SYMBOL",
            "name": "directive"
          }
        ]
      }
    },
    "content": {
      "type": "CHOICE",
      "members": [
        {
          "type": "PATTERN",
          "value": "[^\\[]+"
        },
        {
          "type": "PATTERN",
          "value": "\\["
        }
      ]
    },
    "directive": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "tag_start"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "CHOICE",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "_statement"
                },
                {
                  "type": "SYMBOL",
                  "name": "comment"
                }
              ]
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "tag_end"
        }
      ]
    },
    "tag_start": {
      "type": "STRING",
      "value": "[%"
    },
    "tag_end": {
      "type": "STRING",
      "value": "%]"
    },
    "comment": {
      "type": "PATTERN",
      "value": "#.*"
    },
    "_statement": {
      "type": "REPEAT1",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SYMBOL",
            "name": "filter_expression"
          },
          {
            "type": "SYMBOL",
            "name": "keyword"
          },
          {
            "type": "SYMBOL",
            "name": "variable"
          },
          {
            "type": "SYMBOL",
            "name": "bare_string"
          }
        ]
      }
    },
    "filter_expression": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "variable"
        },
        {
          "type": "SYMBOL",
          "name": "pipe"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        }
      ]
    },
    "keyword": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "IF"
        },
        {
          "type": "STRING",
          "value": "END"
        },
        {
          "type": "STRING",
          "value": "FOREACH"
        },
        {
          "type": "STRING",
          "value": "WHILE"
        },
        {
          "type": "STRING",
          "value": "SWITCH"
        },
        {
          "type": "STRING",
          "value": "CASE"
        },
        {
          "type": "STRING",
          "value": "GET"
        },
        {
          "type": "STRING",
          "value": "CALL"
        },
        {
          "type": "STRING",
          "value": "SET"
        },
        {
          "type": "STRING",
          "value": "INCLUDE"
        },
        {
          "type": "STRING",
          "value": "USE"
        },
        {
          "type": "STRING",
          "value": "FILTER"
        },
        {
          "type": "STRING",
          "value": "PROCESS"
        },
        {
          "type": "STRING",
          "value": "BLOCK"
        }
      ]
    },
    "variable": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SEQ",
            "members": [
              {
                "type": "SYMBOL",
                "name": "dot"
              },
              {
                "type": "SYMBOL",
                "name": "identifier"
              }
            ]
          }
        }
      ]
    },
    "identifier": {
      "type": "PATTERN",
      "value": "[a-zA-Z_][a-zA-Z0-9_]*"
    },
    "dot": {
      "type": "STRING",
      "value": "."
    },
    "bare_string": {
      "type": "PATTERN",
      "value": "[a-zA-Z0-9_.\\/]+"
    },
    "pipe": {
      "type": "STRING",
      "value": "|"
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": [],
  "reserved": {}
}